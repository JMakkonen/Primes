#  This program uses Binet's formula to calculate Fibonacci numbers
include Math
puts("Starting program to calculate Fibonacci numbers via Binet's formula")

# This part reads in a previously generated list of Fibonacci numbers.
# The list is generated by program FibSeq.rb
f = File.open("Fib_seq.data","r")
fib_seq = []
count = 0
# First entry in the file is the number of terms it holds
num = f.readline().to_f
# Now read all the terms into an array.
while (count < num) do
  fib_seq.push(f.readline().to_f)
  count = count +1
end
f.close()
puts("#{fib_seq.length()} primes read in. Up to #{fib_seq[fib_seq.length()-1]}")
# The following loop shows the values as calculated term by term vs. Binet's formula
count = 1
while (count < num) do
  est = (1/sqrt(5))*(((1+sqrt(5))/2)**count - ((1-sqrt(5))/2)**count)
  puts("Term #{count} by Binet's formula is #{est} vs. real value of #{fib_seq[count]}")
  count = count +1
end

# The results are that up to term 72, the formula within the significant digits 
# of the arithmetic engine, is the same whole number as the true term.
# Above 72, because of rounding issues, Binet's formula gives a wrong result.
# Above term 79, both values, whether calculated from previous terms or by
# Binet's formula, are off the actual integer value of the true Fibonacci
# number due to limitations in the arithmetic engine.